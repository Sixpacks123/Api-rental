// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/graphql_example?connect_timeout=300"
}
// building.model.ts
model Building {
  id         Int         @id @default(autoincrement())
  name       String
  syndic     Syndic      @relation(fields: [syndicId], references: [id])
  syndicId   Int
  apartments Apartment[]
  commonAreas CommonArea[]
}

// apartment.model.ts
model Apartment {
  id              Int            @id @default(autoincrement())
  type            String
  owner           Owner          @relation(fields: [ownerId], references: [id])
  ownerId         Int
  options         Option[]
  tenants         Tenant[]       @relation("ApartmentTenant")
  mainTenantId    Int?
  building        Building       @relation(fields: [buildingId], references: [id])
  buildingId      Int
  commonAreas     CommonArea[]   @relation("ApartmentCommonAreas", references: [id])
  rentReceipts    RentReceipt[]
}

// option.model.ts
model Option {
  id           Int      @id @default(autoincrement())
  name         String
  apartments   Apartment[] @relation("ApartmentOptions")
}

// person.model.ts
model Person {
  id              Int      @id @default(autoincrement())
  accountNumber   String
  isVatSubject    Boolean
  tenants         Tenant[]
  owners          Owner[]
}

// tenant.model.ts
model Tenant {
  id               Int      @id @default(autoincrement())
  person           Person   @relation(fields: [personId], references: [id])
  personId         Int
  apartment        Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId      Int
  isMainTenant     Boolean
  rentReceipts     RentReceipt[]
}

// syndic.model.ts
model Syndic {
  id         Int      @id @default(autoincrement())
  name       String
  buildings  Building[]
}

// owner.model.ts
model Owner {
  id           Int     @id @default(autoincrement())
  person       Person  @relation(fields: [personId], references: [id])
  personId     Int
  accountNumber String
  isVatSubject Boolean
  rentReceipts RentReceipt[]
}

// common-area.model.ts
model CommonArea {
  id         Int      @id @default(autoincrement())
  name       String
  buildings  Building[] @relation(fields: [buildingId], references: [id])
  buildingId Int
  apartments Apartment[] @relation("ApartmentCommonAreas", references: [id])
}

// rent-receipt.model.ts
model RentReceipt {
  id               Int      @id @default(autoincrement())
  issueDate        DateTime
  paymentDate      DateTime?
  reminderDates    DateTime[]
  apartment        Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId      Int
}
